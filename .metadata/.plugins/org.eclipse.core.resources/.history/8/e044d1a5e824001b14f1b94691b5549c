package P1;

import java.io.InputStreamReader;
import java.net.HttpURLConnection;
import java.net.URL;
import java.net.URLEncoder;
import java.io.BufferedReader;
import org.json.simple.JSONArray;
import org.json.simple.JSONObject;
import org.json.simple.parser.JSONParser;
public class D1 {
	public static void main(String[] args) throws Exception {
		D1 d=new D1();
		d.CalT();
	}
	public void CalT() throws Exception {
		String apiUrl = "http://apis.data.go.kr/1360000/VilageFcstInfoService/getUltraSrtNcst";
		// 홈페이지에서 받은 키
		String serviceKey = "ErAsOKr9XXxDlVbGwGEARx5X%2BO5sTL0Ark1N59jOP6KusH%2BMLk2L05SbnYSPSVjt0ln%2FWPZb2YQ6DLqMAG22eg%3D%3D";

		StringBuilder urlBuilder = new StringBuilder(apiUrl);
		String nx = "60"; // 위도
		String ny = "127"; // 경도
		String baseDate = "20201112"; // 조회하고싶은 날짜 이 예제는 어제 날짜 입력해 주면 됨
		String baseTime = "1200"; // API 제공 시간을 입력하면 됨
		String dataType = "json"; // 타입 xml, json 등등 ..
		String numOfRows = "153"; // 한 페이지 결과 수

		// 전날 23시 부터 153개의 데이터를 조회하면 오늘과 내일의 날씨를 알 수 있음

		urlBuilder.append("?" + URLEncoder.encode("ServiceKey", "UTF-8") + "=" + serviceKey);
		urlBuilder.append("&" + URLEncoder.encode("nx", "UTF-8") + "=" + URLEncoder.encode(nx, "UTF-8")); // 경도
		urlBuilder.append("&" + URLEncoder.encode("ny", "UTF-8") + "=" + URLEncoder.encode(ny, "UTF-8")); // 위도
		urlBuilder.append("&" + URLEncoder.encode("base_date", "UTF-8") + "="
				+ URLEncoder.encode(baseDate, "UTF-8")); /* 조회하고싶은 날짜 */
		urlBuilder.append("&" + URLEncoder.encode("base_time", "UTF-8") + "="
				+ URLEncoder.encode(baseTime, "UTF-8")); /* 조회하고싶은 시간 AM 02시부터 3시간 단위 */
		urlBuilder.append(
				"&" + URLEncoder.encode("dataType", "UTF-8") + "=" + URLEncoder.encode(dataType, "UTF-8")); /* 타입 */
		urlBuilder.append("&" + URLEncoder.encode("numOfRows", "UTF-8") + "="
				+ URLEncoder.encode(numOfRows, "UTF-8")); /* 한 페이지 결과 수 */

		/*
		 * GET방식으로 전송해서 파라미터 받아오기
		 */
		URL url = new URL(urlBuilder.toString());
		// 어떻게 넘어가는지 확인하고 싶으면 아래 출력분 주석 해제
		// System.out.println(url);
		HttpURLConnection conn = (HttpURLConnection) url.openConnection();
		conn.setRequestMethod("GET");
		conn.setRequestProperty("Content-type", "application/json");
		// System.out.println("Response code: " + conn.getResponseCode());
		BufferedReader rd;
		if (conn.getResponseCode() >= 200 && conn.getResponseCode() <= 300) {
			rd = new BufferedReader(new InputStreamReader(conn.getInputStream()));
		} else {
			rd = new BufferedReader(new InputStreamReader(conn.getErrorStream()));
		}
		StringBuilder sb = new StringBuilder();
		String line;
		while ((line = rd.readLine()) != null) {
			sb.append(line);
		}
		rd.close();
		conn.disconnect();
		String result = sb.toString();
		//System.out.println(result);
		JSONParser parser = new JSONParser();
		JSONObject obj = (JSONObject) parser.parse(result);
		System.out.println("obj :"+obj);
		// response 키를 가지고 데이터를 파싱
		JSONObject parse_response = (JSONObject) obj.get("response");
		// response 로 부터 body 찾기
		JSONObject parse_body = (JSONObject) parse_response.get("body");
		// body 로 부터 items 찾기
		JSONObject parse_items = (JSONObject) parse_body.get("items");

		// items로 부터 itemlist 를 받기
		JSONArray parse_item = (JSONArray) parse_items.get("item");
		String speed = "";
		String temper="";
		try {
			for (int i = 0; i < parse_item.size(); i++) {
				JSONObject row = (JSONObject) parse_item.get(i);
				String wind = (String) row.get("category");
				if (wind.equals("WSD")) {
					speed = (String) row.get("obsrValue");

					// System.out.println("Wind Speed :"+speed);

				}
				for (int j = 0; j < parse_item.size(); j++) {
					JSONObject col = (JSONObject) parse_item.get(j);
					String temperature = (String) col.get("category");
					if (temperature.equals("T1H")) {
						temper = (String) col.get("obsrValue");			
			}
				}
			}
		} catch (Exception e) {
			// System.out.println(e.getStackTrace());
		}
		// 체감온도(℃)=13.12+0.6215×T-11.37V0.16+0.3965V0.16×T이다.
		double ws = Double.parseDouble(speed);  
		double V = Math.pow(ws, 0.16);
		double tp=Double.parseDouble(temper);
		double temp = 13.12 + 0.6215 *tp - 11.37 * V + 0.3965 * V * tp;
		System.out.println("temp :"+temp);

	}
	

	
}
